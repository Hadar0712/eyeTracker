clear variables; clear global; clear mex; close all; fclose('all'); clc
%%% NOTE: this code relies on functions from the PsychToolBox package,
%%% please make sure it is installed

dbstop if error % for debugging: trigger a debug point when an error occurs

% setup directories
myDir = fileparts(mfilename('fullpath'));
cd(myDir);
cd data;                        dirs.data       = cd;
        cd mat;                 dirs.mat        = cd;   % directory where mat files with data generated by the readme files should be placed
cd ..;
if ~isdir('msgs_ophak') %#ok<*ISDIR>
    mkdir(fullfile(cd,'msgs_ophak'));
end
        cd msgs_ophak;          dirs.msgsO      = cd;
cd ..;
if ~isdir('samples_ophak')
    mkdir(fullfile(cd,'samples_ophak'));
end
        cd samples_ophak;       dirs.samplesO   = cd;
cd ..;
cd ..;  cd function_library;    dirs.funclib    = cd;
cd ..;
addpath(genpath(dirs.funclib));                 % add dirs to path

%%% cut up the data file into tasks
[files,nfiles] = FileFromFolder(dirs.mat,[],'mat');

if 0
    % filter so we only get data that matches the filter. uses regexp
    filtstr = '^(?!01|02|03).*$';
    results = regexpi({files.name}.',filtstr,'start');
    files   = files(~cellfun(@isempty,results));
    nfiles  = length(files);
end

for p=1:nfiles
    disp(files(p).name)
    % read msgs and data
    dat     = load(fullfile(dirs.mat,files(p).name));
    scrRes  = dat.expt.winRect(3:4);
    ts      = dat.data.gaze.systemTimeStamp;
    % the Pro SDK does not guarantee invalid data is nan. Set to nan if
    % invalid
    dat.data.gaze. left.gazePoint.onDisplayArea(:,~dat.data.gaze. left.gazePoint.valid) = nan;
    dat.data.gaze.right.gazePoint.onDisplayArea(:,~dat.data.gaze.right.gazePoint.valid) = nan;
    dat.data.gaze. left.pupil.diameter(~dat.data.gaze. left.pupil.valid) = nan;
    dat.data.gaze.right.pupil.diameter(~dat.data.gaze.right.pupil.valid) = nan;
    % collect data from the file, and turn gaze positions from normalized
    % coordinates into pixels
    samp    = [bsxfun(@times,dat.data.gaze.left.gazePoint.onDisplayArea,scrRes.'); bsxfun(@times,dat.data.gaze.right.gazePoint.onDisplayArea,scrRes.'); dat.data.gaze.left.pupil.diameter; dat.data.gaze.right.pupil.diameter];
    header  = {'t','gaze_point_LX','gaze_point_LY','gaze_point_RX','gaze_point_RY','pupil_diameter_L','pupil_diameter_R'};
    [timest,what,msgs] = parseMsgs(dat.messages);
    
    % split up per task and write
    for q=1:length(timest.fix)
        fname = sprintf('%s_R%03d.txt',files(p).fname,q);
        fprintf('%s\n',fname);
        
        % msgs
        fid = fopen(fullfile(dirs.msgsO,fname),'wt');
        t = msgs{q}.';
        fprintf(fid,'%d\t%s\n',t{:});
        fclose(fid);
        
        % data
        fid = fopen(fullfile(dirs.samplesO,fname),'wt');
        fmt = repmat('%s\t',1,length(header));
        fmt(end) = 'n';
        % header
        fprintf(fid,fmt,header{:});
        % data
        fmt = ['%ld\t' repmat('%.2f\t',1,length(header)-3) repmat('%.4f\t',1,2)];
        fmt(end) = 'n';
        qSel = ts>=timest.fix(q) & ts<=timest.end(q);
        data = [num2cell(ts(qSel)); num2cell(samp(:,qSel))];
        fprintf(fid,fmt,data{:});
        fclose(fid);
    end
end

rmpath(genpath(dirs.funclib));                  % cleanup path
